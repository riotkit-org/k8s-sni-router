---
apiVersion: v1
kind: ConfigMap
metadata:
    name: {{ include "sni-router.fullname" . }}-router-config
data:
    entrypoint.sh: |
        #!/bin/sh
        mkdir -p /var/log/nginx /var/cache/nginx
        exec nginx -c /etc/nginx/nginx.conf -g 'daemon off;'
    nginx.conf: |
        #load_module /usr/lib/nginx/modules/ngx_stream_module.so;

        user www-data;
        worker_processes  {{ .Values.nginx.workerProcesses }};

        error_log  /dev/stderr error;
        pid        /var/run/nginx.pid;

        events {
            worker_connections  {{ .Values.nginx.workerConnections }};
        }

        http {
            access_log /dev/stdout;
            limit_conn_zone $binary_remote_addr zone=http_addr:{{ .Values.nginx.httpProxy.zoneLength }};
            limit_conn_log_level error;

            map $host $targetHttpBackend {
                {{- range $key, $host := $.Values.routes }}
                {{ $host.dns }} {{ $host.ip }}:80;
                {{- end }}
            }
            server {
                listen 8080 default_server;
                server_name _;
                limit_conn http_addr {{ .Values.nginx.httpProxy.limitConn }};

                location /.well-known/acme-challenge/ {
                    proxy_set_header Host $host;
                    proxy_pass       http://$targetHttpBackend;
                }
                location / {
                    return 301 https://$host$request_uri;
                }
            }

            server {
                listen 127.0.0.1:8081;
                location /nginx_status {
                    stub_status on;

                    access_log off;
                    allow {{ .Values.nginx.metrics.allowIp }};
                    deny all;
                }
            }
        }

        stream {
            limit_conn_zone $binary_remote_addr zone=tls_addr:{{ .Values.nginx.tlsProxy.zoneLength }};
            limit_conn_log_level error;

            map $ssl_preread_server_name $targetBackend {
                {{- range $key, $host := $.Values.routes }}
                {{ $host.dns }} {{ $host.ip }}:443;
                {{- end }}
            }
            server {
                listen 4443;
                limit_conn tls_addr {{ .Values.nginx.tlsProxy.limitConn }};

                proxy_connect_timeout {{ .Values.nginx.tlsProxy.connectTimeout }};
                proxy_timeout {{ .Values.nginx.tlsProxy.timeout }};
                preread_timeout {{ .Values.nginx.tlsProxy.preReadTimeout }};
                resolver 1.1.1.1;

                proxy_pass $targetBackend;
                ssl_preread on;
            }
        }
